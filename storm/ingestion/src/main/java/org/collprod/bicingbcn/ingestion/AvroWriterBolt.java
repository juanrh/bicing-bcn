package org.collprod.bicingbcn.ingestion;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.mapred.FsInput;
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichBolt;
import backtype.storm.tuple.Tuple;

import com.google.auto.value.AutoValue;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.cache.RemovalListener;
import com.google.common.cache.RemovalNotification;
/**
 * Writes the data to the HDFS path specified in the configuration for this data source
 * Data is serialized in Avro with an Avro file per month, hence it is stored in the path
 * <data source HDFS path>/<month>.avro as a new Avro record with the name AvroWriterBolt.AVRO_RECORD_NAME, 
 * and with the fields:
 * - AVRO_TIMESTAMP_FIELD :: long
 * - AVRO_CONTENT_FIELD :: string
 * 
 * No additional timestamp check is performed, this bolt asssumes that all the data is new
 * */
public class AvroWriterBolt extends BaseRichBolt {
	
	// Generated by Eclipse 
	private static final long serialVersionUID = 117628243688887424L;
	
	private static final Logger LOGGER = LoggerFactory.getLogger(AvroWriterBolt.class);
	private static final SimpleDateFormat MONTH_FORMATTER = new SimpleDateFormat("yyyy-MM-dd");
	private static final int FILEWRITER_SYNC_INTERVAL = 100;
	
	public static final String AVRO_RECORD_NAME = "data";
	public static final String AVRO_RECORD_NAMESPACE = "org.collprod";
	public static final String AVRO_TIMESTAMP_FIELD = "timestamp";
	public static final String AVRO_CONTENT_FIELD = "content";
	public static final Schema AVRO_SCHEMA;
	static {
		AVRO_SCHEMA = SchemaBuilder
				.record(AVRO_RECORD_NAME).namespace(AVRO_RECORD_NAMESPACE)
				.fields()
					.name(AVRO_TIMESTAMP_FIELD).type(Schema.create(Schema.Type.LONG)).noDefault()
					.name(AVRO_CONTENT_FIELD).type(Schema.create(Schema.Type.STRING)).noDefault()
				.endRecord();
	}
	/**
	 * Storm collector to emit tuples
	 * */
	private OutputCollector collector;
	
	private org.apache.hadoop.conf.Configuration hadoopConf;
	private FileSystem hdfs;	
	
	private Map<String, String> datasourcesDirectories;
	
	@AutoValue
	static abstract class DatasourceMonth {
		DatasourceMonth() {}
		public static DatasourceMonth create(String datasource, String month) {
			return new AutoValue_AvroWriterBolt_DatasourceMonth(datasource, month);
		}
		public abstract String datasource();
		public abstract String month();
	}
	
	private LoadingCache<DatasourceMonth, DataFileWriter<GenericRecord>> writersCache;
	
	/**
	 * Builds the target file path as <datasource directory>/<month>.avro.
	 * If the target file already exists, then it is open for appending, otherwise it is created
	 * */
	private DataFileWriter<GenericRecord> openHDFSFile(DatasourceMonth datasourceMonth) throws IOException {
		DataFileWriter<GenericRecord> writer = new DataFileWriter<GenericRecord>(
				new GenericDatumWriter<GenericRecord>(AVRO_SCHEMA));
		writer.setSyncInterval(FILEWRITER_SYNC_INTERVAL);
		// writer.setCodec(CodecFactory.snappyCodec()); // omit for now
		
		Path targetPath = new Path(this.datasourcesDirectories.get(datasourceMonth.datasource())
				+ "/"+  datasourceMonth.month() + ".avro");

			// just for logging
		String fullTargetPath = this.hdfs.getWorkingDirectory() + "/" + targetPath;
		// Append to an existing file, or create a new file is file otherwise
		if (this.hdfs.exists(targetPath)) {
			// FIXME: this is not working. Intead create a new file by adding numbers before the avro
			// extension (e.g. 2014-06-22.avro, 2014-06-22-1.avro, ...). List current directory to
			// discover last index
			
			// FIXME this is due to using a single node sandbox, TODO turn on and off by configuration
			this.hdfs.setReplication(targetPath, (short)1);
			
			// appending to an existing file	
			LOGGER.info("Appending to existing file {}", fullTargetPath);
			OutputStream outputStream = this.hdfs.append(targetPath);
			writer.appendTo(new FsInput(targetPath, this.hadoopConf), outputStream); 
		} else {
			// creating a new file
			LOGGER.info("Creating new file "  +  fullTargetPath + " for datasource {} and month {}", 
					datasourceMonth.datasource(), datasourceMonth.month());
			OutputStream outputStream = this.hdfs.create(targetPath);
			writer.create(AVRO_SCHEMA, outputStream);
		}
		
		return writer;
	}
	
	private LoadingCache<DatasourceMonth, DataFileWriter<GenericRecord>> createWritersCache() {
		CacheLoader<DatasourceMonth, DataFileWriter<GenericRecord>> loader = 
				new CacheLoader<DatasourceMonth, DataFileWriter<GenericRecord>> () {
			@Override
			public DataFileWriter<GenericRecord> load(DatasourceMonth datasourceMonth)
					throws Exception {
				return AvroWriterBolt.this.openHDFSFile(datasourceMonth);
			}
		};
		
		// A synchronous removal listener should be enough in principle 
		RemovalListener<DatasourceMonth, DataFileWriter<GenericRecord>> removalListener = 
				new RemovalListener<DatasourceMonth, DataFileWriter<GenericRecord>>() {
			@Override
			public void onRemoval(
					RemovalNotification<DatasourceMonth, DataFileWriter<GenericRecord>> removal) {
				try {
					LOGGER.info("Closing file for datasource {}", removal.getKey().datasource());
					removal.getValue().close();
				} catch (IOException ioe) {
					LOGGER.error("Error closing file for datasource {}: {}", 
								removal.getKey().datasource(), ioe.getMessage());
					throw new RuntimeException(ioe);
				}
			}
		};

		return CacheBuilder.newBuilder()
				.expireAfterAccess(3, TimeUnit.MINUTES)
				.removalListener(removalListener)
				.build(loader);
	}
	
	@Override
	public void prepare(@SuppressWarnings("rawtypes") Map stormConf, TopologyContext context,
			OutputCollector collector) {
		this.collector = collector;
		
		// Load target datasource directories from Storm configuration 
		try {
			Map<String, Configuration> datasourcesConfigurations = 
					IngestionTopology.deserializeConfigurations((Map<String, String>) stormConf.get(IngestionTopology.DATASOURCE_CONF_KEY));
			this.datasourcesDirectories = new HashMap<String, String>();
			for (Map.Entry<String, Configuration> datasourceConfig : datasourcesConfigurations.entrySet()) {
				this.datasourcesDirectories.put(datasourceConfig.getKey(),
											    datasourceConfig.getValue().getString("hdfs_path"));
			}
		} catch (ConfigurationException ce) {
			LOGGER.error("Error parsing datasource configurations: " + ce.getMessage());
			throw new RuntimeException(ce);
		}
		
		// Create objects to interact with HDFS
			// This configuration reads from the default files
		this.hadoopConf = new org.apache.hadoop.conf.Configuration(true);
		hadoopConf.addResource(new Path(stormConf.get("hadoop.res.core-site").toString()));
		hadoopConf.addResource(new Path(stormConf.get("hadoop.res.hdfs-site").toString()));
		
		try {
			this.hdfs = FileSystem.get(this.hadoopConf);
		} catch (IOException ioe) {
			LOGGER.error("Error connecting to HDFS: " + ioe.getMessage());
			throw new RuntimeException(ioe);
		}
		
		// Initialize cache for DataFileWriter objects
		this.writersCache = createWritersCache();
	}
	
	private String timestampToMonth(long timestamp) {
		// convert from the seconds returned by a TimestampParser
		// to the milliseconds accepted by Date
		return MONTH_FORMATTER.format(new Date(timestamp * 1000));
	}

	@Override
	public void execute(Tuple inputTuple) {
		/* Processing tuples of the shape
		   (DATASOURCE_ID, TIMESTAMP_FIELD, CONTENT_FIELD) */
		
		// get datasource
		String datasource = inputTuple.getStringByField(RestIngestionSpout.DATASOURCE_ID);
		// compute month
		long timestamp = inputTuple.getLongByField(TimestampParserBolt.TIMESTAMP_FIELD);
			// this computation is completely stateless 
		String month = timestampToMonth(timestamp);
		
		// now get the DataFileWriter
		DataFileWriter<GenericRecord> writer = null;
		try {
			writer = 
					this.writersCache.get(DatasourceMonth.create(datasource, month));
		} catch (ExecutionException ee) {
			LOGGER.error("Error getting DataFileWriter for tuple for datasource " + datasource 
					+ " and timestamp " + timestamp + " : " + ee.getMessage());	
			this.collector.fail(inputTuple);
			return;
		}
		
		// create and write a new record
		GenericRecord newDataRecord = new GenericData.Record(AVRO_SCHEMA);
		newDataRecord.put(AVRO_TIMESTAMP_FIELD, new Long(timestamp));
		newDataRecord.put(AVRO_CONTENT_FIELD, inputTuple.getStringByField(RestIngestionSpout.CONTENT_FIELD));
		try {
			writer.append(newDataRecord);
		} catch (IOException ioe) {
			LOGGER.error("Error writing Avro record for datasource " + datasource 
					+ " and timestamp " + timestamp + " : " + ioe.getMessage());	
			this.collector.fail(inputTuple);
			return;
		}
		
		// ACK processing for this tupe as ok
		this.collector.ack(inputTuple);
	}
	
	@Override
	public void cleanup() {
		// Invalidate all the elements in the DataFileWriter cache. As a result the removal 
		// listeners will close the corresponding files
		this.writersCache.invalidateAll();
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {
		// this bolts emits no tuples, just stores in HDFS
	}

}
